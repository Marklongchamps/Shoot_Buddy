  
  fetch(`/api/v1${newurl}`, {
    method: 'PATCH',
    body: JSON.stringify(formData),
    credentials: 'same-origin',
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      }
    })
    .then(response => {
      if (response.ok) {
        return response;
      } else {
        let errorMessage = `${response.status} (${response.statusText})`,
        error = new Error(errorMessage);
        throw(error);
      }
    })
    .then(response => response.json())
    .then(body => {debugger
      if (body.errors) {
        SetErrors(body.errors)
      } else {
        setShouldRedirect(body.shot.script.id)
      }
    })
    .catch(error => console.error(`Error in fetch: ${error.message}`));
  };

  const handleChange = event => {
    setUpdatedShot({
      ...updatedShot,
      [event.currentTarget.name]: event.currentTarget.value
    })
  }

  const handleFileUpload = (acceptedFiles) => {
    setUpdatedShot({
      ...updatedShot,
      story_board_photo: acceptedFiles[0]
    })
  }



  const handleSubmit = (event) => {
    event.preventDefault()
    let completeshot = new FormData()
    completeshot.append("shot_number",updatedShot.shot_number)
    completeshot.append("description",updatedShot.description)
    completeshot.append("dialogue",updatedShot.dialogue)
    completeshot.append("notes",updatedShot.notes)
    completeshot.append("story_board_photo",updatedShot.story_board_photo)
    //sends data vaiprops to the scriptshow page
    // props.addNewShotFunction(completeshot)
    debugger
    updateShot(updatedShot)
  }

if (shouldRedirect) {debugger
  return <Redirect to={`/scripts/${shouldRedirect}`} />
}

  return (
    
    <form onSubmit={handleSubmit}>
      <h2>SHOT DATA EDITOR</h2>
      <label>
        Shot Number:
        <input
          name="shot_number"
          id="shot_number"
          type="number"
          onChange={handleChange}
          value={updatedShot.shot_number}
        />
      </label>
      <label>
        Description:
        <input
          name="description"
          id="description"
          type="text"
          onChange={handleChange}
          value={updatedShot.description}
        />
      </label>
        Dialogue:
        <input
          name="dialogue"
          id="dialogue"
          type="text"
          onChange={handleChange}
          value={updatedShot.dialogue}
          />
          <label>
        Notes:
        <input
          name="notes"
          id="notes"
          type="text"
          onChange={handleChange}
          value={updatedShot.notes}
          />
          </label>
          

   <Dropzone onDrop={handleFileUpload}>
    {({getRootProps, getInputProps}) => (
    <section>
    <div {...getRootProps()}>
    <input {...getInputProps()} />
    <button type="button" className="learn more button">CLICK HERE TO REPLACE OR ADD A STORYBOARD</button>
    </div>
    </section>
    )}
  </Dropzone>

      <div>
        <input type="submit" value="Submit" />
      </div>
    </form>
